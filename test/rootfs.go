package test

import (
	"fmt"
	"io/ioutil"
	"os"

	"github.com/rjeczalik/fs"
	"github.com/rjeczalik/fs/fsutil"
	"github.com/rjeczalik/fs/memfs"
)

const sep = string(os.PathSeparator)

func count(fs fs.Filesystem) (n int) {
	fs.Walk(sep, func(_ string, _ os.FileInfo, err error) error {
		if err != nil {
			panic(err)
		}
		n++
		return nil
	})
	n-- // Root dir (/) does not count.
	return
}

// Rootfs TODO
type rootfs struct {
	fs.Filesystem
	int
}

// Dump TODO
func (rfs rootfs) Dump() (root string, err error) {
	if root, err = ioutil.TempDir("", "notify"); err != nil {
		return
	}
	if n := fsutil.Copy(rfs.Filesystem, fsutil.Rel(fs.Default, root)); n != rfs.int {
		err = fmt.Errorf("rootfs.Dump() failure: want n=%d; got %d", rfs.int, n)
	}
	return
}

// Newrootfs TODO
func newrootfs(fs fs.Filesystem) rootfs {
	return rootfs{
		Filesystem: fs,
		int:        count(fs),
	}
}

// FS was autogenerated by github.com/rjeczalik/fs/cmd/gotree - DO NOT EDIT
// BY HAND.
//
// It represents the following directory tree:
//
//   .
//   └── github.com
//       └── rjeczalik
//           ├── fakerpc
//           │   ├── LICENSE
//           │   ├── README.md
//           │   ├── appveyor.yml
//           │   ├── cli
//           │   │   └── cli.go
//           │   ├── cmd
//           │   │   └── fakerpc
//           │   │       └── main.go
//           │   ├── fakerpc.go
//           │   ├── fakerpc_test.go
//           │   ├── fixture.go
//           │   ├── ngrep.go
//           │   ├── ngrep_test.go
//           │   ├── proxy.go
//           │   ├── proxy_test.go
//           │   ├── server.go
//           │   └── util.go
//           ├── fs
//           │   ├── LICENSE
//           │   ├── README.md
//           │   ├── appveyor.yml
//           │   ├── cmd
//           │   │   ├── gotree
//           │   │   │   ├── go.go
//           │   │   │   └── main.go
//           │   │   └── mktree
//           │   │       └── main.go
//           │   ├── fs.go
//           │   ├── fsutil
//           │   │   ├── fixture_test.go
//           │   │   ├── fsutil.go
//           │   │   ├── fsutil_test.go
//           │   │   ├── rel.go
//           │   │   ├── rel_test.go
//           │   │   ├── tee.go
//           │   │   └── tee_test.go
//           │   └── memfs
//           │       ├── memfs.go
//           │       ├── memfs_test.go
//           │       ├── tree.go
//           │       ├── tree_test.go
//           │       ├── util.go
//           │       └── util_test.go
//           └── which
//               ├── LICENSE
//               ├── README.md
//               ├── appveyor.yml
//               ├── cmd
//               │   ├── gofile
//               │   │   └── main.go
//               │   └── gowhich
//               │       └── main.go
//               ├── testdata
//               │   ├── cmd
//               │   │   └── echo
//               │   │       └── echo.go
//               │   ├── darwin_386
//               │   │   └── echo
//               │   ├── darwin_amd64
//               │   │   └── echo
//               │   ├── freebsd_386
//               │   │   └── echo
//               │   ├── freebsd_amd64
//               │   │   └── echo
//               │   ├── linux_386
//               │   │   └── echo
//               │   ├── linux_amd64
//               │   │   └── echo
//               │   ├── windows_386
//               │   │   └── echo.exe
//               │   └── windows_amd64
//               │       └── echo.exe
//               ├── which.go
//               ├── which_elf.go
//               ├── which_macho.go
//               ├── which_pe.go
//               └── which_test.go
//
//   27 directories, 53 files
var FS = newrootfs(memfs.Must(memfs.UnmarshalTab([]byte(".\n\tgithub.com\n\t\trj" +
	"eczalik\n\t\t\tfakerpc\n\t\t\t\tLICENSE\n\t\t\t\tREADME.md\n\t\t\t\tappv" +
	"eyor.yml\n\t\t\t\tcli\n\t\t\t\t\tcli.go\n\t\t\t\tcmd\n\t\t\t\t\tfakerpc\n" +
	"\t\t\t\t\t\tmain.go\n\t\t\t\tfakerpc.go\n\t\t\t\tfakerpc_test.go\n\t\t\t" +
	"\tfixture.go\n\t\t\t\tngrep.go\n\t\t\t\tngrep_test.go\n\t\t\t\tproxy.go\n" +
	"\t\t\t\tproxy_test.go\n\t\t\t\tserver.go\n\t\t\t\tutil.go\n\t\t\tfs\n\t\t" +
	"\t\tLICENSE\n\t\t\t\tREADME.md\n\t\t\t\tappveyor.yml\n\t\t\t\tcmd\n\t\t\t" +
	"\t\tgotree\n\t\t\t\t\t\tgo.go\n\t\t\t\t\t\tmain.go\n\t\t\t\t\tmktree\n\t" +
	"\t\t\t\t\tmain.go\n\t\t\t\tfs.go\n\t\t\t\tfsutil\n\t\t\t\t\tfixture_test" +
	".go\n\t\t\t\t\tfsutil.go\n\t\t\t\t\tfsutil_test.go\n\t\t\t\t\trel.go\n\t" +
	"\t\t\t\trel_test.go\n\t\t\t\t\ttee.go\n\t\t\t\t\ttee_test.go\n\t\t\t\tme" +
	"mfs\n\t\t\t\t\tmemfs.go\n\t\t\t\t\tmemfs_test.go\n\t\t\t\t\ttree.go\n\t\t" +
	"\t\t\ttree_test.go\n\t\t\t\t\tutil.go\n\t\t\t\t\tutil_test.go\n\t\t\twhi" +
	"ch\n\t\t\t\tLICENSE\n\t\t\t\tREADME.md\n\t\t\t\tappveyor.yml\n\t\t\t\tcm" +
	"d\n\t\t\t\t\tgofile\n\t\t\t\t\t\tmain.go\n\t\t\t\t\tgowhich\n\t\t\t\t\t\t" +
	"main.go\n\t\t\t\ttestdata\n\t\t\t\t\tcmd\n\t\t\t\t\t\techo\n\t\t\t\t\t\t" +
	"\techo.go\n\t\t\t\t\tdarwin_386\n\t\t\t\t\t\techo\n\t\t\t\t\tdarwin_amd6" +
	"4\n\t\t\t\t\t\techo\n\t\t\t\t\tfreebsd_386\n\t\t\t\t\t\techo\n\t\t\t\t\t" +
	"freebsd_amd64\n\t\t\t\t\t\techo\n\t\t\t\t\tlinux_386\n\t\t\t\t\t\techo\n" +
	"\t\t\t\t\tlinux_amd64\n\t\t\t\t\t\techo\n\t\t\t\t\twindows_386\n\t\t\t\t" +
	"\t\techo.exe\n\t\t\t\t\twindows_amd64\n\t\t\t\t\t\techo.exe\n\t\t\t\twhi" +
	"ch.go\n\t\t\t\twhich_elf.go\n\t\t\t\twhich_macho.go\n\t\t\t\twhich_pe.go" +
	"\n\t\t\t\twhich_test.go\n"))))
