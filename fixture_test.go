package notify

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"testing"

	"github.com/rjeczalik/fs"
	"github.com/rjeczalik/fs/fsutil"
	"github.com/rjeczalik/fs/memfs"
)

// Tree was autogenerated by github.com/rjeczalik/fs/cmd/gotree - DO NOT EDIT
// BY HAND.
//
// It represents the following directory tree:
//
//   .
//   └── github.com
//       └── rjeczalik
//           ├── fakerpc
//           │   ├── LICENSE
//           │   ├── README.md
//           │   ├── appveyor.yml
//           │   ├── cli
//           │   │   └── cli.go
//           │   ├── cmd
//           │   │   └── fakerpc
//           │   │       └── main.go
//           │   ├── fakerpc.go
//           │   ├── fakerpc_test.go
//           │   ├── fixture.go
//           │   ├── ngrep.go
//           │   ├── ngrep_test.go
//           │   ├── proxy.go
//           │   ├── proxy_test.go
//           │   ├── server.go
//           │   └── util.go
//           ├── fs
//           │   ├── LICENSE
//           │   ├── README.md
//           │   ├── appveyor.yml
//           │   ├── cmd
//           │   │   ├── gotree
//           │   │   │   ├── go.go
//           │   │   │   └── main.go
//           │   │   └── mktree
//           │   │       └── main.go
//           │   ├── fs.go
//           │   ├── fsutil
//           │   │   ├── fixture_test.go
//           │   │   ├── fsutil.go
//           │   │   ├── fsutil_test.go
//           │   │   ├── rel.go
//           │   │   ├── rel_test.go
//           │   │   ├── tee.go
//           │   │   └── tee_test.go
//           │   └── memfs
//           │       ├── memfs.go
//           │       ├── memfs_test.go
//           │       ├── tree.go
//           │       ├── tree_test.go
//           │       ├── util.go
//           │       └── util_test.go
//           └── which
//               ├── LICENSE
//               ├── README.md
//               ├── appveyor.yml
//               ├── cmd
//               │   ├── gofile
//               │   │   └── main.go
//               │   └── gowhich
//               │       └── main.go
//               ├── testdata
//               │   ├── cmd
//               │   │   └── echo
//               │   │       └── echo.go
//               │   ├── darwin_386
//               │   │   └── echo
//               │   ├── darwin_amd64
//               │   │   └── echo
//               │   ├── freebsd_386
//               │   │   └── echo
//               │   ├── freebsd_amd64
//               │   │   └── echo
//               │   ├── linux_386
//               │   │   └── echo
//               │   ├── linux_amd64
//               │   │   └── echo
//               │   ├── windows_386
//               │   │   └── echo.exe
//               │   └── windows_amd64
//               │       └── echo.exe
//               ├── which.go
//               ├── which_elf.go
//               ├── which_macho.go
//               ├── which_pe.go
//               └── which_test.go
//
//   27 directories, 53 files
var Tree = memfs.Must(memfs.UnmarshalTab([]byte(".\n\tgithub.com\n\t\trj" +
	"eczalik\n\t\t\tfakerpc\n\t\t\t\tLICENSE\n\t\t\t\tREADME.md\n\t\t\t\tappv" +
	"eyor.yml\n\t\t\t\tcli\n\t\t\t\t\tcli.go\n\t\t\t\tcmd\n\t\t\t\t\tfakerpc\n" +
	"\t\t\t\t\t\tmain.go\n\t\t\t\tfakerpc.go\n\t\t\t\tfakerpc_test.go\n\t\t\t" +
	"\tfixture.go\n\t\t\t\tngrep.go\n\t\t\t\tngrep_test.go\n\t\t\t\tproxy.go\n" +
	"\t\t\t\tproxy_test.go\n\t\t\t\tserver.go\n\t\t\t\tutil.go\n\t\t\tfs\n\t\t" +
	"\t\tLICENSE\n\t\t\t\tREADME.md\n\t\t\t\tappveyor.yml\n\t\t\t\tcmd\n\t\t\t" +
	"\t\tgotree\n\t\t\t\t\t\tgo.go\n\t\t\t\t\t\tmain.go\n\t\t\t\t\tmktree\n\t" +
	"\t\t\t\t\tmain.go\n\t\t\t\tfs.go\n\t\t\t\tfsutil\n\t\t\t\t\tfixture_test" +
	".go\n\t\t\t\t\tfsutil.go\n\t\t\t\t\tfsutil_test.go\n\t\t\t\t\trel.go\n\t" +
	"\t\t\t\trel_test.go\n\t\t\t\t\ttee.go\n\t\t\t\t\ttee_test.go\n\t\t\t\tme" +
	"mfs\n\t\t\t\t\tmemfs.go\n\t\t\t\t\tmemfs_test.go\n\t\t\t\t\ttree.go\n\t\t" +
	"\t\t\ttree_test.go\n\t\t\t\t\tutil.go\n\t\t\t\t\tutil_test.go\n\t\t\twhi" +
	"ch\n\t\t\t\tLICENSE\n\t\t\t\tREADME.md\n\t\t\t\tappveyor.yml\n\t\t\t\tcm" +
	"d\n\t\t\t\t\tgofile\n\t\t\t\t\t\tmain.go\n\t\t\t\t\tgowhich\n\t\t\t\t\t\t" +
	"main.go\n\t\t\t\ttestdata\n\t\t\t\t\tcmd\n\t\t\t\t\t\techo\n\t\t\t\t\t\t" +
	"\techo.go\n\t\t\t\t\tdarwin_386\n\t\t\t\t\t\techo\n\t\t\t\t\tdarwin_amd6" +
	"4\n\t\t\t\t\t\techo\n\t\t\t\t\tfreebsd_386\n\t\t\t\t\t\techo\n\t\t\t\t\t" +
	"freebsd_amd64\n\t\t\t\t\t\techo\n\t\t\t\t\tlinux_386\n\t\t\t\t\t\techo\n" +
	"\t\t\t\t\tlinux_amd64\n\t\t\t\t\t\techo\n\t\t\t\t\twindows_386\n\t\t\t\t" +
	"\t\techo.exe\n\t\t\t\t\twindows_amd64\n\t\t\t\t\t\techo.exe\n\t\t\t\twhi" +
	"ch.go\n\t\t\t\twhich_elf.go\n\t\t\t\twhich_macho.go\n\t\t\t\twhich_pe.go" +
	"\n\t\t\t\twhich_test.go\n")))

// TreeCount is a sum of Tree's items (dirs + files).
const TreeCount = 80

// Fixture dumps Tree into unique temporary location on the filesystem.
//
// The function it returns do the following:
//
//   - rel takes a relative path and returns an absolute one rooted at the
//     temporary location
//   - exec takes slice of events and executes them
//   - cleanup orders burrito
func Fixture(t *testing.T) (rel func(string) string, exec func(...EventInfo), cleanup func()) {
	assert := func(err ...error) {
		for _, err := range err {
			if err != nil {
				t.Fatalf("unexpected fixture failure: %v", err)
			}
		}
	}
	dir, err := ioutil.TempDir("", "notify")
	assert(err)
	if n := fsutil.Copy(Tree, fsutil.Rel(fs.Default, dir)); n != TreeCount {
		t.Fatalf("unexpected fixture mktree failure: want n=%d; got %d", TreeCount, n)
	}
	rel = func(s string) string {
		return filepath.Clean(filepath.Join(dir, s))
	}
	exec = func(ei ...EventInfo) {
		for _, ei := range ei {
			switch e, isdir, name := ei.Event(), ei.IsDir(), ei.Name(); {
			case e&Create != 0:
				if isdir {
					assert(os.MkdirAll(name, 0755))
				} else {
					f, err := os.Create(name)
					assert(err, f.Close())
				}
			case e&Delete != 0:
				assert(os.RemoveAll(name))
			case e&Write != 0:
				if isdir {
					t.Fatalf("unexpected fixture write failure: %q", name)
				}
				f, err := os.Open(name)
				assert(err)
				_, err = f.WriteString(name)
				assert(err, f.Close())
			case e&Move != 0:
				assert(os.Rename(name, name+".moved"))
			default:
				t.Fatalf("unexpected fixture failure: invalid Event=%v", e)
			}
		}
	}
	cleanup = func() {
		assert(os.RemoveAll(dir))
	}
	return
}
